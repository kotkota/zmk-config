/* KEY POSITIONS (using keypos_def helpers)
  ╭────────────────────────────┬────────────────────────────╮ ╭─────────────────────────────┬─────────────────────────────╮
  │  0   1   2   3   4   5     │      6   7   8   9  10  11 │ │ LN5 LN4 LN3 LN2 LN1 LN0     │     RN0 RN1 RN2 RN3 RN4 RN5 │
  │ 12  13  14  15  16  17     │     18  19  20  21  22  23 │ │ LT5 LT4 LT3 LT2 LT1 LT0     │     RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 24  25  26  27  28  29     │     30  31  32  33  34  35 │ │ LM5 LM4 LM3 LM2 LM1 LM0     │     RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 36  37  38  39  40  41  42 │ 43  44  45  46  47  48  49 │ │ LB5 LB4 LB3 LB2 LB1 LB0 LEC │ REC RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────╮ 50  51  52  53  54 │ 55  56  57  58  59 ╭───────╯ ╰───────╮ LH4 LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3 RH4 ╭───────╯
          ╰────────────────────┴────────────────────╯                 ╰─────────────────────┴─────────────────────╯         */

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP, ...) \
    combo_##NAME { \
        timeout-ms = <TERM>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
        require-prior-idle-ms = <QUICKTAP>; \
        __VA_ARGS__ \
    };

/ {
    combos {
        compatible = "zmk,combos";

    COMBO(toggle_game, &tog GAME, RB5 LB5, DFLT GAME RU, 50, 0)
    COMBO(leader_key, &kp F13, LM3 RM3, DFLT RU, 80, 120)
    COMBO(ha_sch, &kp O, RT2 RT3, RU, 50, 0)
    COMBO(harden_sign, &kp RIGHT_BRACKET, RB1 RB2, RU, 50, 0)
    COMBO(yo, &kp BACKSLASH, LT1 LT0, RU, 50, 0)
    COMBO(excl, &mt LA(N1) LS(N1), LT4 LM4, DFLT RU, 50, 0)
    COMBO(at, &mt LA(N2) LS(N2), LT3 LM3, DFLT RU, 50, 0)
    COMBO(hash, &mt LA(N3) LS(N3), LT2 LM2, DFLT RU, 50, 0)
    COMBO(doll, &mt LA(N4) LS(N4), LT1 LM1, DFLT RU, 50, 0)
    COMBO(percnt, &mt LA(N5) LS(N5), LM0 LT0, DFLT RU, 50, 0)
    COMBO(caret, &mt LA(N6) LS(N6), RT0 RM0, DFLT RU, 50, 0)
    COMBO(ampersand, &mt LA(N7) LS(N7), RT1 RM1, DFLT RU, 50, 0)
    COMBO(asterisk, &mt LA(N8) LS(N8), RT2 RM2, DFLT RU, 50, 0)
    COMBO(lpar, &mt LA(N9) LS(N9), RT3 RM3, DFLT RU, 50, 0)
    COMBO(rpar, &mt LA(N0) LS(N0), RT4 RM4, DFLT RU, 50, 0)
    COMBO(under_ellipsis, &mt LA(SEMI) LS(MINUS), RT2 RT1, DFLT RU, 50, 0)
    COMBO(equal, &mt PLUS EQUAL, RM0 RM1, DFLT RU, 50, 180)
    COMBO(dash, &mt LA(LS(MINUS)) MINUS, RM2 RM1, DFLT RU, 50, 180)
    COMBO(quo, &single_double SQT SQT, RB2 RB1, DFLT, 50, 0)
    COMBO(dquo, &single_double DQT DQT, RB2 RB3, DFLT, 50, 0)
    COMBO(dquo_ru, &single_double LS(NUMBER_2) LS(NUMBER_2), RB2 RB3, RU, 50, 0)
    COMBO(grave, &single_double GRAVE GRAVE, RB3 RB4, DFLT, 50, 0)
    COMBO(del, &mt LA(DEL) DEL, RT2 RT3, NUMB, 50, 0)
    COMBO(bsp, &mt LA(BSPC) BSPC, RT1 RT2, NUMB, 50, 0)
    COMBO(mute, &kp C_MUTE, RT5 RT4, MEDIA, 50, 0)
    COMBO(copy_cut, &mt LG(X) LG(C), LT3 LT2, DFLT RU, 50, 0)
    COMBO(paste, &mt LA(LC(V)) LG(V), LT2 LT1, DFLT RU, 50, 0)
    COMBO(html_tag, &html_tag 0 0, LM1 LM0, DFLT RU, 50, 0)
    COMBO(eq_quo, &equals_qoute, LB1 LB0, DFLT, 50, 0)
    COMBO(fr_quo, &macro_pair LS(LA(EQUAL)) LA(EQUAL), LB1 LB0, RU, 50, 0)
    COMBO(sk_lshift, &sk LSHFT, LM4 LB3, DFLT RU, 50, 0)
    COMBO(sk_rshift, &sk RSHFT, RB3 RM4, DFLT RU, 50, 0)
    COMBO(par, &par, LB4 LB3, NUMB, 50, 0)
    COMBO(bkt, &bkt, LB3 LB2, NUMB, 50, 0)
    COMBO(brc, &brc, LB2 LB1, NUMB, 50, 0)
    COMBO(comma, &mt SEMI COMMA, LB3 LB2, DFLT, 50, 0)
    COMBO(comma_ru, &mt RS(NUMBER_8) RS(NUMBER_6), LB3 LB2, RU, 50, 0)
    COMBO(dot, &mt COLON DOT, LB2 LB1, DFLT, 50, 0)
    COMBO(dot_ru, &mt RS(NUMBER_5) RS(NUMBER_7), LB1 LB2, RU, 50, 0)
    COMBO(fwslash_question, &kp SLASH, RB3 RB4, RU, 50, 0)
    COMBO(ru_on, &ru_on, LM2 LM3 LM1, RU DFLT, 50, 0)
    COMBO(ru_off, &ru_off, LB2 LB3 LB1, RU DFLT, 50, 0)
    // COMBO(leader, &ak_leader, LB4 LB3, RU DFLT, 50, 0)

    };
};
