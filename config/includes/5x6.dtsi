// ZMK includes
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/outputs.h>

#define ___ &trans
#define DFLT   0
#define RU     1
#define GAME   2
#define NUMB   3
#define FUNC   4
#define MEDIA  5
#define STCKY  6
#define SYS    7

&lt { quick-tap-ms = <250>; };

&mt {
    hold-trigger-on-release;
    flavor = "balanced";
    quick-tap-ms = <250>;
};

&soft_off { hold-time-ms = <2000>; };

#include "combos.dtsi"
#include "macros.dtsi"
#include "behaviors.dtsi"

/ {
    sensors { triggers-per-rotation = <20>; };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Default";
            bindings = < LAYER_FROM64( \
&kp ESCAPE,           &kp N1,       &kp N2,       &kp N3,      &kp N4,        &kp N5,         &kp N6,          &kp N7,          &kp N8,         &kp N9,          &kp N0,           &kp BACKSPACE,
&lt SYS ESC,          &mt EXCL Q,   &kp W,        &kp E,       &kp R,         &kp T,          &kp Y,           &kp U,           &kp I,          &kp O,           &kp P,            &kp LBKT,
&mt LC(LA(LCMD)) TAB, &mt LSHIFT A, &mtl LCTRL S, &mtl LALT D, &mtl LCMD F,   &kp G,          &kp H,           &mtr RCMD J,     &mtr RALT K,    &mtr RCTRL L,    &mtr RSHIFT SEMI, &mt LC(LA(LCMD)) SQT,
&lt MEDIA GRAVE,      &mt CAPS Z,   &kp X,        &kp C,       &kp V,         &kp B,          &trans,          &kp C_MUTE,      &kp N,          &kp M,           &kp COMMA,        &kp DOT,     &mt QMARK SLASH, &lt MEDIA BSLH,
&trans,               &trans,       &trans,       &trans,      &lt FUNC BSPC, &lt NUMB SPACE, &lt STCKY ENTER, &lt STCKY ENTER, &lt NUMB SPACE, &lt FUNC BSPC,   &trans,           &trans,      &trans,          &trans
            )>;

            sensor-bindings = <&inc_dec_kp LC(Y) LC(Z) &inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        ru {
            label = "Russian";
            bindings = < LAYER_FROM64( \
&trans, &trans, &trans, &trans, &trans, &trans,                                          &trans, &trans, &trans, &trans, &trans, &trans,
&trans, &trans, &trans, &trans, &trans, &trans,                                         &trans, &trans, &trans, &ru_z, &ru_ha, &trans,
&trans, &trans, &trans, &trans, &trans, &trans,                                         &trans, &trans, &trans, &trans, &trans, &mt RS(NUMBER_8) RS(NUMBER_5),
&trans, &trans, &trans, &trans, &trans, &trans, &trans, &trans,                        &trans, &trans, &trans, &trans, &mt QMARK APOS, &trans,
&trans, &trans, &trans, &trans, &trans, &trans, &trans, &trans,                        &trans, &trans, &trans, &trans, &trans, &trans
            )>;
        };

        game {
            label = "Game";
            bindings = < LAYER_FROM64( \
&trans, &trans, &trans, &trans, &trans, &trans,                                          &trans, &trans, &trans, &trans, &trans, &trans,
&kp ESC, &kp TAB, &kp Q, &kp W, &kp E, &kp R,                                          &kp Y, &kp U, &kp I, &kp O, &kp P, &kp LBKT,
&kp B, &kp LSHFT, &kp A, &kp S, &kp D, &kp F,                                          &kp H, &kp J, &kp K, &kp L, &kp SEMI, &kp SQT,
&lt NUMB ENTER, &kp LCTRL, &kp Z, &kp X, &kp C, &kp V, &trans, &trans,               &kp N, &kp M, &kp COMMA, &kp DOT, &kp FSLH, &kp BSLH,
&trans, &trans, &trans, &trans, &mt H T, &kp SPACE, &kp G, &kp BSPC,                 &kp LALT, &kp LCMD, &trans, &trans, &trans, &trans
            )>;
        };

        num {
            label = "Num / Nav";
            bindings = < LAYER_FROM64( \
&trans, &trans, &trans, &trans, &trans, &trans,                                          &trans, &trans, &trans, &trans, &trans, &trans,
&trans, &none, &kp N7, &kp N8, &kp N9, &mt KP_ASTERISK PLUS,                          &kp HOME, &kp LA(LEFT), &kp UP, &kp LA(RIGHT), &kp END, &none,
&trans, &mt LSHIFT SEMI, &mt LCTRL N4, &mt LALT N5, &mt LCMD N6, &mt KP_DIVIDE MINUS, &kp PG_UP, &kp LEFT, &kp DOWN, &kp RIGHT, &none, &none,
&trans, &kp KP_EQUAL, &kp N1, &kp N2, &kp N3, &kp N0, &trans, &trans,                &kp PG_DN, &kp LG(LBKT), &kp LG(RBKT), &kp RS(RC(TAB)), &kp RC(TAB), &trans,
&trans, &trans, &trans, &trans, &trans, &trans, &none, &trans,                         &trans, &trans, &trans, &trans, &trans, &trans
            )>;
        };

        symb {
            label = "FN / Sym";
            bindings = < LAYER_FROM64( \
&trans, &trans, &trans, &trans, &trans, &trans,                                          &trans, &trans, &trans, &trans, &trans, &trans,
&kp F1, &kp F2, &kp F3, &kp F4, &kp F5, &kp F6,                                        &kp EXCL, &kp AT, &kp POUND, &kp DLLR, &kp PERCENT, &trans,
&kp F7, &kp F8, &kp F9, &kp F10, &kp F11, &kp F12,                                     &kp CARET, &kp AMPS, &kp ASTRK, &kp LPAR, &kp RPAR, &trans,
&mt QMARK SLASH, &macro_pair LPAR RPAR, &macro_pair LT GT, &macro_pair LBKT RBKT, &macro_pair LBRC RBRC, &mt PIPE BSLH, &trans, &trans, &mt BSLH PIPE, &kp LBRC, &kp RBRC, &kp LBKT, &kp RBKT, &kp QMARK,
&trans, &trans, &trans, &trans, &trans, &trans, &trans, &trans,                        &trans, &trans, &trans, &trans, &trans, &trans
            )>;
        };

        media {
            label = "Shortcuts";
            bindings = < LAYER_FROM64( \
&trans, &trans, &trans, &trans, &trans, &trans,                                          &trans, &trans, &trans, &trans, &trans, &trans,
&none, &kp LS(LG(N1)), &kp LS(LG(N2)), &kp LG(LS(N3)), &kp LS(LG(N4)), &kp LS(LG(N5)), &none, &none, &none, &playnp, &kp C_VOL_DN, &kp C_VOL_UP,
&none, &kp LC(LEFT), &kp LC(RIGHT), &none, &none, &none,                              &none, &none, &none, &none, &none, &none,
&none, &kp LG(Z), &kp LG(LS(Z)), &none, &none, &none, &trans, &trans,                &none, &none, &none, &none, &none, &none,
&trans, &trans, &trans, &trans, &kp DEL, &none, &none, &none,                         &none, &kp DEL, &trans, &trans, &trans, &trans
            )>;
        };

        sticky {
            label = "Sticky mods";
            bindings = < LAYER_FROM64( \
&trans, &trans, &trans, &trans, &trans, &trans,                                          &trans, &trans, &trans, &trans, &trans, &trans,
&none, &none, &kp LG(LEFT), &kp LG(RIGHT), &kp LG(R), &kp LG(T),                      &none, &mkp MB1, &mkp MB3, &mkp MB2, &none, &none,
&sk LC(LA(LCMD)), &sk LSHIFT, &sk LCTRL, &sk LALT, &sk LCMD, &kp LG(G),               &none, &sk RCMD, &sk RALT, &sk RCTRL, &sk RSHIFT, &sk LC(LA(LCMD)),
&none, &none, &none, &none, &kp LBRC, &kp RBRC, &trans, &trans,                       &none, &none, &none, &none, &none, &none,
&trans, &trans, &trans, &trans, &kp LBKT, &kp RBKT, &none, &none,                     &ru_on, &ru_off, &trans, &trans, &trans, &trans
            )>;
        };

        system {
            label = "System";
            bindings = < LAYER_FROM64( \
&trans, &trans, &trans, &trans, &trans, &trans,                                          &trans, &trans, &trans, &trans, &trans, &trans,
&none, &none, &none, &none, &none, &none,                                              &bt BT_PRV, &bt BT_NXT, &none, &none, &none, &none,
&none, &none, &none, &none, &none, &none,                                              &bt BT_SEL 0, &bt BT_SEL 1, &bt BT_SEL 2, &none, &none, &ext_power EP_OFF,
&soft_off, &none, &none, &none, &none, &none, &trans, &trans,                         &bt BT_DISC 0, &bt BT_DISC 1, &bt BT_DISC 2, &bt BT_CLR_ALL, &none, &studio_unlock,
&trans, &trans, &trans, &trans, &upd_fw_l, &bootloader, &none, &none,                  &bootloader, &upd_fw_r, &trans, &trans, &trans, &trans
            )>;
        };
    };
};
